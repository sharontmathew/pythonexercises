# -*- coding: utf-8 -*-
"""exercise 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iqUZbMv2h_24hdGme026Q8jkDDMVhMun
"""

#Check whether string contains only numbers

# Initialising string
string1 = '1234556'

# printing initial string
print ("Initial Strings : ", string1)

# Using isdigit()
if string1.isdigit():
	print ("String1 contains all numbers")
else:
	print ("String1 doesn't contains all numbers")

#Duplicate characters in the string

#use input string  'str' or sentence don't use char

string = "elephant"
duplicates = []

for char in string:
   ## str.count(char) returns the frequency of a char in the str
   if string.count(char) > 1:
    if char not in duplicates:
      duplicates.append(char)
print(*duplicates)

#count the vowels and consonants


# don't use the variable name as my string 

my_string="Python programe"
vowel = set("aeiouAEIOU")
print(vowel)

#initialize to zero
v_count=0
c_count=0
for i in my_string: 
    if i in vowel:
        #v_count will increment by one
        v_count=v_count+1
    elif( (i>='a' and i<='z') or (i>='A' and i<='Z')):
        #c_count will increment by one.
        c_count = c_count + 1
print("Number of consonents in the sring:", c_count) 
print("Number of vowels in the string:", v_count)

#Count Occurrence of a Character in a String

string = ("Please enter String")
char = input("Enter Character : ")
i = 0
count = 0

while(i < len(string)):
    if(string[i] == char):
        count = count + 1
    i = i + 1

print("The total Number of Times character  ", char, " has Occurred = " , count, )

#To find permutation of a given string

from itertools import permutations

# Initialising string
string = "CAP"

# Printing initial string
print("Initial string", string)

# Finding all permutation
permutation = [''.join(p) for p in permutations(string)]
# Printing result
print("Resultant List", str(permutation))

#To find given pattern
txt = "EDUCATION"

x = txt.find("CAT")

print('The given pattern is at count: ',x)

mylist = ["a", "b", "a", "c", "c"]
mylist = list(dict.fromkeys(mylist))
print(mylist)

#remove duplicates from an 

Array = input('Enter the array: ')
Array = list(dict.fromkeys(Array))
print('Clean array: ',Array)

#Reverse a string

txt = "Hello World"[::-1]
print(txt)

#to cout the highest occuring word in the sentence 
from collections import Counter
given_string = ('repeating word in a sentence, using the same word twice, using the same word twice in a row')
words = given_string.split()
words_count = Counter(words).most_common()
print('Most frequent word in the given sentence is : ' + words_count[0][0])
print('\nNumber of occurrence is: ',words_count[0][1])

#To check a number is prime number

n=int(input("Enter a number:"))
if n>1:
    for i in range(2,n//2):
        if(n%i)==0:
            print(n,"is not a prime number")
            break
    else:
        print(n,"is a prime number")

# Python Program to find Prime Factors of a Number
 
Number = int(input("Enter the Number: "))

i = 1

while(i <= Number):
    count = 0
    if(Number % i == 0):
        j = 1
        while(j <= i):
            if(i % j == 0):
                count = count + 1
            j = j + 1
            
        if (count == 2):
            print(" %d is a Prime Factor of a Given Number %d" %(i, Number))
    i = i + 1

# Program to transpose a matrix 

#given matrix
X = [[12,7],
    [4 ,5],
    [3 ,8]]

#expected matrix
result = [[0,0,0],
         [0,0,0]]

# iterate through rows
for i in range(len(X)):
   # iterate through columns
   for j in range(len(X[0])):
       result[j][i] = X[i][j]

for r in result:
   print(r)

#Adding or Substracting two matrix

# importing numpy as np
import numpy as np

#matrix 1
A = np.array([[1, 2], 
              [3, 4]])

#matrix 2
B = np.array([[4, 5], 
              [6, 7]])

print("Printing elements of first matrix")
print(A)
print("Printing elements of second matrix")
print(B)

# adding two matrix
print("Addition of two matrix")
print(np.add(A, B))

#Substating two matrix

print("Substraction of two matrix")
print(np.subtract(A,B))

# Bubble Sort Algorithm

def bubbleSort(arr):
	n = len(arr)

	# Traverse through all array elements
	for i in range(n-1):
		# Last i elements are already in place
		for j in range(0, n-i-1):

			# traverse the array from 0 to n-i-1
			if arr[j] > arr[j + 1] :
				arr[j], arr[j + 1] = arr[j + 1], arr[j]

# Driver code to test above
arr = [3,11,4,22,53,3,55,23,48]

bubbleSort(arr)

print ("Sorted array is:")
for i in range(len(arr)):
	print ("% d" % arr[i],end=" ")

test_stirng = input("String to search is : ")
total = 1
i = 0
while(i < len(test_stirng)):
   if(test_stirng[i] == ' ' or test_stirng == '\n' or test_stirng == '\t'):
      total = total + 1
   i +=1

print("Total Number of Words are: ", total)